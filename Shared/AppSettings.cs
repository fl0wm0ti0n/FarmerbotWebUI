// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using FarmerBotWebUI.Shared;
//
//    var appsettings = Appsettings.FromJson(jsonString);
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FarmerBotWebUI.Shared
{
    public class AppSettings : IAppSettings
    {
        [JsonProperty("AllowedHosts")]
        public string AllowedHosts { get; set; } = "*";

        [JsonProperty("GeneralSettings")]
        public GeneralSettings GeneralSettings { get; set; } = new GeneralSettings();

        [JsonProperty("DockerSettings")]
        public DockerSettings DockerSettings { get; set; } = new DockerSettings();

        [JsonProperty("FarmerBotSettings")]
        public FarmerBotSettings FarmerBotSettings { get; set; } = new FarmerBotSettings();

        [JsonProperty("ThreefoldFarmSettings")]
        public ThreefoldFarmSettings ThreefoldFarmSettings { get; set; } = new ThreefoldFarmSettings();

        [JsonProperty("ThreefoldApiSettings")] 
        public ThreefoldApiSettings ThreefoldApiSettings { get; set; } = new ThreefoldApiSettings();

        [JsonProperty("SecuritySettings")] 
        public SecuritySettings SecuritySettings { get; set; } = new SecuritySettings();

        [JsonProperty("NotificationSettings")]
        public NotificationSettings NotificationSettings { get; set; } = new NotificationSettings();
        
        public static AppSettings FromJson(string json) => JsonConvert.DeserializeObject<AppSettings>(json, FarmerBotWebUI.Shared.Converter.Settings);

        public event EventHandler<AppSettings> OnAppSettingsChanged;

        public void InvokeOnAppSettingsChanged(AppSettings appSettings)
        {
            OnAppSettingsChanged?.Invoke(this, appSettings);
        }
    }

    public partial class DockerSettings
    {
        [JsonProperty("DockerEndpointWindows")]
        public string DockerEndpointWindows { get; set; } = "";

        [JsonProperty("DockerEndpointLinux")]
        public string DockerEndpointLinux { get; set; } = "";

        [JsonProperty("DockerRunCommand")]
        public string DockerRunCommand { get; set; }

        [JsonProperty("DockerDownCommand")]
        public string DockerDownCommand { get; set; }

        [JsonProperty("DockerLogCommand")]
        public string DockerLogCommand { get; set; }
    }

    public partial class FarmerBotSettings
    {
        [JsonProperty("WorkingDirectory")]
        public string WorkingDirectory { get; set; }

        [JsonProperty("ComposeFile")]
        public string ComposeFile { get; set; }

        [JsonProperty("ThreefoldNetworkFile")]
        public string ThreefoldNetworkFile { get; set; }

        [JsonProperty("FarmerBotConfigFile")]
        public string FarmerBotConfigFile { get; set; }

        [JsonProperty("FarmerBotLogFile")]
        public string FarmerBotLogFile { get; set; }

        [JsonProperty("FarmerBotStatusInterval")]
        public int FarmerBotStatusInterval { get; set; } = 60;

        [JsonProperty("ContainerNames")]
        public List<string> ContainerNames { get; set; }
    }

    public partial class GeneralSettings
    {
        [JsonProperty("CancelationTimeout")]
        public int CancelationTimeout { get; set; } = 30000;

        [JsonProperty("ServerUpdateInterval")]
        public int ServerUpdateInterval { get; set; }
    }

    public partial class SecuritySettings
    {
        [JsonProperty("DontShowEnv")]
        public bool DontShowEnv { get; set; }
    }

    public partial class ThreefoldApiSettings
    {
        [JsonProperty("GraphQl")]
        public Uri GraphQl { get; set; }

        [JsonProperty("GridProxy")]
        public Uri GridProxy { get; set; }

        [JsonProperty("ApiCallInterval")]
        public long ApiCallInterval { get; set; }
    }

    public partial class ThreefoldFarmSettings
    {
        [JsonProperty("FarmId")]
        public int FarmId { get; set; }

        [JsonProperty("Network")]
        public string Network { get; set; }

        [JsonProperty("NetworkRelay")]
        public string NetworkRelay { get; set; }
    }

    public partial class NotificationSettings
    {
        [JsonProperty("GuiNotification")]
        public bool GuiNotification { get; set; } = true;
    }

    public static class Serialize
    {
        public static string ToJson(this AppSettings self) => JsonConvert.SerializeObject(self, FarmerBotWebUI.Shared.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
