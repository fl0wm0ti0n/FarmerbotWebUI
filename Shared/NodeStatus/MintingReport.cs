// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using FarmerBotWebUI.Shared.NodeStatus;
//
//    var mintApi = MintApi.FromJson(jsonString);

using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FarmerbotWebUI.Shared.NodeStatus
{

    public partial class MintingReport
    {
        [JsonProperty("hash")]
        public string Hash { get; set; }

        [JsonProperty("receipt")]
        public Receipt Receipt { get; set; }

        [JsonIgnore]
        public string BotName { get; set; } = string.Empty;

        [JsonIgnore]
        public DateTime LastUpdate { get; set; }

        [JsonIgnore]
        public bool NoStatus { get; set; } = false;

        [JsonIgnore]
        public bool IsError { get; set; }

        [JsonIgnore]
        public string ErrorMessage { get; set; } = string.Empty;

    }

    public partial class Receipt
    {
        [JsonProperty("Minting", NullValueHandling = NullValueHandling.Ignore)]
        public Minting Minting { get; set; }

        [JsonProperty("Fixup", NullValueHandling = NullValueHandling.Ignore)]
        public Fixup Fixup { get; set; }
    }

    public partial class Fixup
    {
        [JsonProperty("period")]
        public Period Period { get; set; }

        [JsonProperty("node_id")]
        public long NodeId { get; set; }

        [JsonProperty("farm_id")]
        public long FarmId { get; set; }

        [JsonProperty("minted_cloud_units")]
        public CloudUnits MintedCloudUnits { get; set; }

        [JsonProperty("correct_cloud_units")]
        public CloudUnits CorrectCloudUnits { get; set; }

        [JsonProperty("fixup_cloud_units")]
        public CloudUnits FixupCloudUnits { get; set; }

        [JsonProperty("stellar_payout_address")]
        public string StellarPayoutAddress { get; set; }

        [JsonProperty("minted_receipt")]
        public string MintedReceipt { get; set; }

        [JsonProperty("correct_receipt")]
        public string CorrectReceipt { get; set; }

        [JsonProperty("minted_reward")]
        public CorrectCarbonOffset MintedReward { get; set; }

        [JsonProperty("correct_reward")]
        public CorrectCarbonOffset CorrectReward { get; set; }

        [JsonProperty("fixup_reward")]
        public CorrectCarbonOffset FixupReward { get; set; }

        [JsonProperty("minted_carbon_offset")]
        public CorrectCarbonOffset MintedCarbonOffset { get; set; }

        [JsonProperty("correct_carbon_offset")]
        public CorrectCarbonOffset CorrectCarbonOffset { get; set; }

        [JsonProperty("fixup_carbon_offset")]
        public CorrectCarbonOffset FixupCarbonOffset { get; set; }
    }

    public partial class CorrectCarbonOffset
    {
        [JsonProperty("musd")]
        public long Musd { get; set; }

        [JsonProperty("tft")]
        public long Tft { get; set; }
    }

    public partial class CloudUnits
    {
        [JsonProperty("cu")]
        public double Cu { get; set; }

        [JsonProperty("su")]
        public double Su { get; set; }

        [JsonProperty("nu")]
        public long Nu { get; set; }
    }

    public partial class Period
    {
        [JsonProperty("start")]
        public long Start { get; set; }

        [JsonProperty("end")]
        public long End { get; set; }
    }

    public partial class Minting
    {
        [JsonProperty("period")]
        public Period Period { get; set; }

        [JsonProperty("node_id")]
        public long NodeId { get; set; }

        [JsonProperty("twin_id")]
        public long TwinId { get; set; }

        [JsonProperty("farm_id")]
        public long FarmId { get; set; }

        [JsonProperty("farm_name")]
        public string FarmName { get; set; }

        [JsonProperty("stellar_payout_address")]
        public string StellarPayoutAddress { get; set; }

        [JsonProperty("measured_uptime")]
        public long MeasuredUptime { get; set; }

        [JsonProperty("tft_connection_price")]
        public long TftConnectionPrice { get; set; }

        [JsonProperty("cloud_units")]
        public CloudUnits CloudUnits { get; set; }

        [JsonProperty("resource_units")]
        public ResourceU ResourceUnits { get; set; }

        [JsonProperty("resource_utilization")]
        public ResourceU ResourceUtilization { get; set; }

        [JsonProperty("reward")]
        public CorrectCarbonOffset Reward { get; set; }

        [JsonProperty("carbon_offset")]
        public CorrectCarbonOffset CarbonOffset { get; set; }

        [JsonProperty("node_type")]
        public string NodeType { get; set; }
    }

    public partial class ResourceU
    {
        [JsonProperty("cru")]
        public double Cru { get; set; }

        [JsonProperty("mru")]
        public double Mru { get; set; }

        [JsonProperty("hru")]
        public long Hru { get; set; }

        [JsonProperty("sru")]
        public double Sru { get; set; }

        [JsonProperty("ip", NullValueHandling = NullValueHandling.Ignore)]
        public long? Ip { get; set; }
    }

    //public enum StellarPayoutAddress { Gam3Nvkjqs5Rwheehn5Savgr4Nbduzae7F4Sf57Pk5J4Ceg6H72Wlcof };

    //public enum FarmName { OmniflowCapacity };

    //public enum NodeType { Diy };

    public partial class MintApi
    {
        public static List<MintApi> FromJson(string json) => JsonConvert.DeserializeObject<List<MintApi>>(json, FarmerBotWebUI.Shared.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<MintApi> self) => JsonConvert.SerializeObject(self, FarmerBotWebUI.Shared.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                //StellarPayoutAddressConverter.Singleton,
                //FarmNameConverter.Singleton,
                //NodeTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    //internal class StellarPayoutAddressConverter : JsonConverter
    //{
    //    public override bool CanConvert(Type t) => t == typeof(StellarPayoutAddress) || t == typeof(StellarPayoutAddress?);

    //    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    //    {
    //        if (reader.TokenType == JsonToken.Null) return null;
    //        var value = serializer.Deserialize<string>(reader);
    //        if (value == "GAM3NVKJQS5RWHEEHN5SAVGR4NBDUZAE7F4SF57PK5J4CEG6H72WLCOF")
    //        {
    //            return StellarPayoutAddress.Gam3Nvkjqs5Rwheehn5Savgr4Nbduzae7F4Sf57Pk5J4Ceg6H72Wlcof;
    //        }
    //        throw new Exception("Cannot unmarshal type StellarPayoutAddress");
    //    }

    //    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    //    {
    //        if (untypedValue == null)
    //        {
    //            serializer.Serialize(writer, null);
    //            return;
    //        }
    //        var value = (StellarPayoutAddress)untypedValue;
    //        if (value == StellarPayoutAddress.Gam3Nvkjqs5Rwheehn5Savgr4Nbduzae7F4Sf57Pk5J4Ceg6H72Wlcof)
    //        {
    //            serializer.Serialize(writer, "GAM3NVKJQS5RWHEEHN5SAVGR4NBDUZAE7F4SF57PK5J4CEG6H72WLCOF");
    //            return;
    //        }
    //        throw new Exception("Cannot marshal type StellarPayoutAddress");
    //    }

    //    public static readonly StellarPayoutAddressConverter Singleton = new StellarPayoutAddressConverter();
    //}

    //internal class FarmNameConverter : JsonConverter
    //{
    //    public override bool CanConvert(Type t) => t == typeof(FarmName) || t == typeof(FarmName?);

    //    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    //    {
    //        if (reader.TokenType == JsonToken.Null) return null;
    //        var value = serializer.Deserialize<string>(reader);
    //        if (value == "omniflow_capacity")
    //        {
    //            return FarmName.OmniflowCapacity;
    //        }
    //        throw new Exception("Cannot unmarshal type FarmName");
    //    }

    //    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    //    {
    //        if (untypedValue == null)
    //        {
    //            serializer.Serialize(writer, null);
    //            return;
    //        }
    //        var value = (FarmName)untypedValue;
    //        if (value == FarmName.OmniflowCapacity)
    //        {
    //            serializer.Serialize(writer, "omniflow_capacity");
    //            return;
    //        }
    //        throw new Exception("Cannot marshal type FarmName");
    //    }

    //    public static readonly FarmNameConverter Singleton = new FarmNameConverter();
    //}

    //internal class NodeTypeConverter : JsonConverter
    //{
    //    public override bool CanConvert(Type t) => t == typeof(NodeType) || t == typeof(NodeType?);

    //    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    //    {
    //        if (reader.TokenType == JsonToken.Null) return null;
    //        var value = serializer.Deserialize<string>(reader);
    //        if (value == "DIY")
    //        {
    //            return NodeType.Diy;
    //        }
    //        throw new Exception("Cannot unmarshal type NodeType");
    //    }

    //    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    //    {
    //        if (untypedValue == null)
    //        {
    //            serializer.Serialize(writer, null);
    //            return;
    //        }
    //        var value = (NodeType)untypedValue;
    //        if (value == NodeType.Diy)
    //        {
    //            serializer.Serialize(writer, "DIY");
    //            return;
    //        }
    //        throw new Exception("Cannot marshal type NodeType");
    //    }

    //    public static readonly NodeTypeConverter Singleton = new NodeTypeConverter();
    //}
}
