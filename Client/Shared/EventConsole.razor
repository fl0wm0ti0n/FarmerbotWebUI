@page "/eventconsole"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject NotificationService NotificationService
@inject IEventConsoleService EventConsoleService
@inject IDockerService DockerService
@implements IDisposable

<RadzenCard class="rz-border-radius-0" Style="padding:unset; margin:unset; padding-right: 2px; padding-left: 2px; border-top: 1px solid rgb(43, 55, 60); border-bottom: 1px solid rgb(43, 55, 60);">
    <RadzenText class="rz-shadow-3" Style="margin-bottom: 4px">Event Console</RadzenText>
    <RadzenRow Style="padding-bottom: 4px; height: 25px">
        <RadzenColumn Style="padding-left: 8px; border-right:solid; border-right-width:thin; border-right-color: rgb(69, 86, 94)" class="" Size="1">
            <RadzenText Style="font-weight:300; color: rgb(198, 183, 141)">Start Time</RadzenText>
        </RadzenColumn>
        <RadzenColumn Style="padding-left: 8px; border-right:solid; border-right-width:thin; border-right-color: rgb(69, 86, 94)" class="" Size="1">
            <RadzenText Style="font-weight:300; color: rgb(198, 183, 141)">End Time</RadzenText>
        </RadzenColumn>
        <RadzenColumn Style="padding-left: 8px; border-right:solid; border-right-width:thin; border-right-color: rgb(69, 86, 94)" class="" Size="1">
            <RadzenText Style="font-weight:300; color: rgb(198, 183, 141)">Message Id</RadzenText>
        </RadzenColumn>
        <RadzenColumn Style="padding-left: 8px; border-right:solid; border-right-width:thin; border-right-color: rgb(69, 86, 94)" Size="1">
            <RadzenText Style="font-weight:300; color: rgb(198, 183, 141)">Severity</RadzenText>
        </RadzenColumn>
        <RadzenColumn Style="padding-left: 8px; border-right:solid; border-right-width:thin; border-right-color: rgb(69, 86, 94)" Size="1">
            <RadzenText Style="font-weight:300; color: rgb(198, 183, 141)">Source</RadzenText>
        </RadzenColumn>
        <RadzenColumn Style="padding-left: 8px; border-right:solid; border-right-width:thin; border-right-color: rgb(69, 86, 94)" Size="1">
            <RadzenText Style="font-weight:300; color: rgb(198, 183, 141)">Title</RadzenText>
        </RadzenColumn>
        <RadzenColumn Style="padding-left: 8px; border-right:solid; border-right-width:thin; border-right-color: rgb(69, 86, 94)" Size="1">
            <RadzenText Style="font-weight:300; color: rgb(198, 183, 141)">Result</RadzenText>
        </RadzenColumn>
        <RadzenColumn Style="padding-left: 8px;" Size="5">
            <RadzenText Style="font-weight:300; color: rgb(198, 183, 141)">Message</RadzenText>
        </RadzenColumn>
    </RadzenRow>
</RadzenCard>
<RadzenCard Style="height: 100%; width: 100%; padding:unset; padding-right: 2px; padding-left: 2px; overflow: auto;" class="rz-border-radius-0">

    @for (int i = EventConsoleService.Messages.Count - 1; i >= 0; i--)
    {
        var message = EventConsoleService.Messages[i];
    @if (message.ShowInGui)
    {
        <RadzenRow class="@GetSeverityClass(message.Severity)" Style="margin-bottom: 2px; height: 25px">
                @if (message.ShowPrograssBar)
                {
                    <RadzenColumn Size="1">
                        <RadzenText onclick="@(() => OpenEventDialog(message))" Style="padding-top: 2px; padding-left: 4px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; font-weight:300" class="rz-border-color-base-700">@message.Title</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="10" class="align-content-center justify-content-center">
                        <RadzenProgressBar ProgressBarStyle="@GetStyle(message.Severity)" Style="height: 8px; width: 100%; margin-top: 9px; " Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="rz-border-radius-0" />
                    </RadzenColumn>
                    <RadzenColumn Size="1">
                        <RadzenButton Size="ButtonSize.ExtraSmall" Style="margin-bottom: 4px;" class="rz-border-radius-0 rz-ripple" Variant="Variant.Flat" Shade="Shade.Darker" Click=@(() => DockerService.CancelOperation(message.Id.Action)) Text="Cancel" ButtonStyle="ButtonStyle.Danger" Disabled="@(!message.GetResultAsBool())" />
                    </RadzenColumn>
                }
                else
                {
                    <RadzenColumn Size="1">
                        <RadzenText onclick="@(() => OpenEventDialog(message))" MouseEnter="@(args => ShowTooltip(message.StartTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss"), args))" Style="padding-top: 2px; padding-left: 4px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; font-weight:300">@message.StartTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="1">
                        <RadzenText onclick="@(() => OpenEventDialog(message))" MouseEnter="@(args => ShowTooltip(((message.EndTime != null) ? message.EndTime.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss") : ""), args))" Style="padding-top: 2px; padding-left: 4px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; font-weight:300">@((message.EndTime != null) ? message.EndTime.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss") : "")</RadzenText>
                        </RadzenColumn>
                    <RadzenColumn Size="1">
                        <RadzenText onclick="@(() => OpenEventDialog(message))" MouseEnter="@(args => ShowTooltip(message.Id.Id.ToString(), args))" Style="padding-top: 2px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; font-weight:300">@message.Id.Id.ToString()</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="1">
                        <RadzenText onclick="@(() => OpenEventDialog(message))" MouseEnter="@(args => ShowTooltip(message.Severity.ToString(), args))" Style="padding-top: 2px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; font-weight:300">@message.Severity.ToString()</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="1">
                        <RadzenText onclick="@(() => OpenEventDialog(message))" MouseEnter="@(args => ShowTooltip(message.Id.Source.ToString(), args))" Style="padding-top: 2px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; font-weight:300">@message.Id.Source.ToString()</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="1">
                        <RadzenText onclick="@(() => OpenEventDialog(message))" MouseEnter="@(args => ShowTooltip(message.Title, args))" Style="padding-top: 2px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; font-weight:300">@message.Title</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="1">
                        <RadzenText onclick="@(() => OpenEventDialog(message))" MouseEnter="@(args => ShowTooltip(message.Result.ToString(), args))" Style="padding-top: 2px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; font-weight:300">@message.Result.ToString()</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="5">
                        <RadzenText onclick="@(() => OpenEventDialog(message))" MouseEnter="@(args => ShowTooltip(message.Message, args))" Style="padding-top: 2px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; font-weight:300">@message.Message</RadzenText>
                    </RadzenColumn>
                }
        </RadzenRow>
        }
    }
</RadzenCard>

@code {

    public async Task OpenEventDialog(EventMessage message)
    {
        await DialogService.OpenAsync<EventDialog>($"Event: {message.Title}", 
            new Dictionary<string, object>() { { "Message", message } },
            new DialogOptions() 
            { 
                Resizable = true, 
                Draggable = true, 
                CloseDialogOnEsc = true 
            });
    }

    void ShowTooltip(string info, ElementReference elementReference) => TooltipService.Open(elementReference, info, 
            new TooltipOptions() 
            { 
                Delay = 1000, 
                Duration = 10000, 
                    Style = "background: rgb(178, 222, 228); color: black; font-weight: 100; font-size:small; word-wrap: break-word;"
            });

    private string GetSeverityClass(LogLevel severity)
    {
        return "justify-content-center align-items-center rz-shadow-3 " + LogLevelStyleMapper.LogLevelToRadzenCss(severity);
    }

    private ProgressBarStyle GetStyle(LogLevel severity)
    {
        return LogLevelStyleMapper.LogLevelToProgressBarStyle(severity);
    }

    private void CloseConsole()
    {
        StateHasChanged();
    }

    private void ClearConsole()
    {
        EventConsoleService.ClearMessages();
    }

    protected override void OnInitialized()
    {
        EventConsoleService.EventConsoleChanged += StateHasChanged;
    }

    public void Dispose()
    {
        EventConsoleService.EventConsoleChanged -= StateHasChanged;
    }
}