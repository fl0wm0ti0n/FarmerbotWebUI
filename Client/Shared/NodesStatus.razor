@page "/nodestatus"
@inject IDockerService DockerService

<RadzenCard Style="width: 310px; height: 200px; background-color: rgb(70, 68, 77); justify-content: center; align-items: center; " class="rz-border-radius-0">
    <RadzenText Style="font-weight:700; margin-bottom: 8px">FarmerBot status</RadzenText>
    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem">
        @if (DockerService.ActualFarmerBotStatus != null && !DockerService.ActualFarmerBotStatus.NoStatus)
        {
            <RadzenStack Orientation="Orientation.Vertical" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.Center" Gap="5px">
                <RadzenText Style="width: 90px; font-weight:300; " >Updated at</RadzenText>
                @foreach (var farmerBot in DockerService.ActualFarmerBotStatus.Containers)
                {
                    <RadzenText Style="width: 90px; font-weight:300; ">@(farmerBot.Name)</RadzenText>
                }
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Vertical" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.Center" Gap="5px">
                <RadzenText Style="width: 140px;">@DockerService.ActualFarmerBotStatus.LastUpdate.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</RadzenText>
                @foreach (var farmerBot in DockerService.ActualFarmerBotStatus.Containers)
                {
                    <RadzenBadge Shade="Shade.Darker" BadgeStyle="@GetBadgeStyle(farmerBot.Running)" Text="@(farmerBot.Name)" />
                }
            </RadzenStack>
        }
        else
        {
            <RadzenColumn Style="height: 100%; width: 100%; " class="align-content-center justify-content-center">
                <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Light" Style="height: 130px; width: 100%; margin-top: 9px; " Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="rz-border-radius-0" />
            </RadzenColumn>
        }
    </RadzenStack>
</RadzenCard>
@code {
 
    private string GetSeverityClass(EventMessage message)
    {
        return "justify-content-center align-items-center rz-shadow-3 " + LogLevelStyleMapper.LogLevelToRadzenCss(message.Severity);
    }

    private BadgeStyle GetBadgeStyle(bool status)
    {
        return status ? BadgeStyle.Success : BadgeStyle.Danger;
    }

    protected override void OnInitialized()
    {
        DockerService.StatusChanged += StateHasChanged;
    }

    public void Dispose()
    {
        DockerService.StatusChanged -= StateHasChanged;
    }
}
