@page "/setupstatus"
@inject IDockerService DockerService

<RadzenStack Orientation="Orientation.Vertical" Class="rz-p-12" Gap="1rem">
    <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.Center" Gap="2rem">
        <RadzenText Style="font-weight:500; color: rgb(63, 203, 190)">All Containers</RadzenText>
        <RadzenText Style="font-weight:500; color: rgb(63, 203, 190)">Compose File</RadzenText>
        <RadzenText Style="font-weight:500; color: rgb(63, 203, 190)">Config File</RadzenText>
        <RadzenText Style="font-weight:500; color: rgb(63, 203, 190)">.Env-File</RadzenText>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.Center" Gap="2rem">
        <RadzenBadge Shade="Shade.Darker" BadgeStyle="@GetBadgeStyle(DockerService.ActualFarmerBotStatus.Status())" Text="@(GetSuccessText(DockerService.ActualFarmerBotStatus.Status()))" />
        <RadzenBadge Shade="Shade.Darker" BadgeStyle="@GetBadgeStyle(DockerService.ActualFarmerBotStatus.ComposeOk)" Text="@(GetSuccessText(DockerService.ActualFarmerBotStatus.ComposeOk))" />
        <RadzenBadge Shade="Shade.Darker" BadgeStyle="@GetBadgeStyle(DockerService.ActualFarmerBotStatus.ConfigOk)" Text="@(GetSuccessText(DockerService.ActualFarmerBotStatus.ConfigOk))" />
        <RadzenBadge Shade="Shade.Darker" BadgeStyle="@GetBadgeStyle(DockerService.ActualFarmerBotStatus.EnvOk)" Text="@(GetSuccessText(DockerService.ActualFarmerBotStatus.EnvOk))" />
    </RadzenStack>
</RadzenStack>

@code {

    private string GetSeverityClass(EventMessage message)
    {
        return "justify-content-center align-items-center rz-shadow-3 " + LogLevelStyleMapper.LogLevelToRadzenCss(message.Severity);
    }

    private BadgeStyle GetBadgeStyle(bool status)
    {
        return status ? BadgeStyle.Success : BadgeStyle.Danger;
    }

    private string GetSuccessText(bool status)
    {
        return status ? "OK" : "Not OK";
    }
}
