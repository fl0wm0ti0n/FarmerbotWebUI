@page "/farmerbotstatus"
@inject IDockerService DockerService

<RadzenStack Orientation="Orientation.Horizontal" Class="rz-p-8" Gap="1rem">
    @if (DockerService.ActualFarmerBotStatus != null)
    {
        <RadzenStack Orientation="Orientation.Vertical" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.Center" Gap="2rem">
            <RadzenText>Updated at</RadzenText>
            @foreach (var farmerBot in DockerService.ActualFarmerBotStatus.Containers)
            {
                <RadzenText Style="font-weight:500; color: rgb(63, 203, 190)">@(farmerBot.Name) </RadzenText>
            }
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Vertical" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.Center" Gap="2rem">
            <RadzenText>@DockerService.ActualFarmerBotStatus.LastUpdate.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</RadzenText>
            @foreach (var farmerBot in DockerService.ActualFarmerBotStatus.Containers)
            {
                <RadzenBadge Shade="Shade.Darker" BadgeStyle="@GetBadgeStyle(farmerBot.Running)" Text="@(farmerBot.Name)" />
            }
        </RadzenStack>
    }
    else
    {
        <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Light" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
</RadzenStack>

@code {
 
    private string GetSeverityClass(EventMessage message)
    {
        return "justify-content-center align-items-center rz-shadow-3 " + LogLevelStyleMapper.LogLevelToRadzenCss(message.Severity);
    }

    private BadgeStyle GetBadgeStyle(bool status)
    {
        return status ? BadgeStyle.Success : BadgeStyle.Danger;
    }

    protected override void OnInitialized()
    {
        DockerService.StatusChanged += StateHasChanged;
    }

    public void Dispose()
    {
        DockerService.StatusChanged -= StateHasChanged;
    }
}
