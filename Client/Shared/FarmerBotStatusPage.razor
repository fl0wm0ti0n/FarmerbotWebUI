@page "/farmerbotstatus/{botStatus}"
@inject IDockerService DockerService
@inject IFileService FileService
@implements IDisposable

<RadzenCard Style="width: 310px; height: 310px; background-color: rgb(70, 68, 77); justify-content: center; align-items: center; " class="rz-border-radius-0">
    <RadzenText Style="font-weight:700; margin-bottom: 8px">@botStatus.Name status</RadzenText>
    <RadzenStack Orientation="Orientation.Horizontal" Gap="2.5rem">
        @if (botStatus != null && !botStatus.NoStatus)
        {
            <RadzenStack Orientation="Orientation.Vertical" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.Start" Gap="5px">
                <RadzenText Style="width: 90px; font-weight:300; " >Updated at</RadzenText>
                @foreach (var container in botStatus.Containers)
                {
                    <RadzenText Style="width: 90px; font-weight:300; ">@container.Name</RadzenText>
                }
                @if (botStatus.ConfigOk)
                {
                    <RadzenText Style="margin-top:10px; width: 90px; font-weight:300; ">FarmId</RadzenText>
                    <RadzenText Style="width: 90px; font-weight:300; ">PublicIps</RadzenText>
                    <RadzenText Style="width: 90px; font-weight:300; ">PeriodicWakeup</RadzenText>
                    <RadzenText Style="width: 90px; font-weight:300; ">WakeUpThreshold</RadzenText>
                }
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Vertical" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.Start" Gap="5px">
                <RadzenText Style="width: 140px;">@botStatus.LastUpdate.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</RadzenText>
                @foreach (var container in botStatus.Containers)
                {
                    <RadzenBadge Shade="Shade.Darker" BadgeStyle="@GetBadgeStyle(container.Running)" Text="@(container.Name)" />
                }
                @if (botStatus.ConfigOk)
                {
                    <RadzenText Style="margin-top:10px; width: 90px; font-weight:100; ">@botStatus.BotDefinitionInfos.Id</RadzenText>
                    <RadzenText Style="width: 90px; font-weight:100; ">@botStatus.BotDefinitionInfos.PublicIps</RadzenText>
                    <RadzenText Style="width: 90px; font-weight:100; ">@botStatus.BotDefinitionInfos.PeriodicWakeup.ToString("hh:mm tt")</RadzenText>
                    <RadzenText Style="width: 90px; font-weight:100; ">@(botStatus.BotDefinitionInfos.WakeUpThreshold)%</RadzenText>
                }
            </RadzenStack>
        }
        else
        {
            <RadzenColumn Style="height: 100%; width: 100%; " class="align-content-center justify-content-center">
                <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Light" Style="height: 230px; width: 100%; margin-top: 9px; " Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="rz-border-radius-0" />
            </RadzenColumn>
        }
    </RadzenStack>
</RadzenCard>
@code {
    [Parameter]
    public FarmerBotStatus botStatus { get; set; }

    private string GetSeverityClass(EventMessage message)
    {
        return "justify-content-center align-items-center rz-shadow-3 " + LogLevelStyleMapper.LogLevelToRadzenCss(message.Severity);
    }

    private BadgeStyle GetBadgeStyle(bool status)
    {
        return status ? BadgeStyle.Success : BadgeStyle.Danger;
    }

    protected override void OnInitialized()
    {
        DockerService.StatusChanged += StateHasChanged;
    }

    public void Dispose()
    {
        DockerService.StatusChanged -= StateHasChanged;
    }
}
