@page "/dashboard"

@inject IEventConsoleService EventConsoleService
@inject IDockerService DockerService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject NotificationService NotificationService

<RadzenSplitter Orientation="Orientation.Horizontal" Collapse=@OnCollapse Expand=@OnExpand style="height: 100%;">
    <RadzenSplitterPane Size="40%" Min="10%" Max="70%">
        <RadzenSplitter Orientation="Orientation.Vertical" Collapse=@OnCollapse Expand=@OnExpand>
            @*### top left - On/off and farmerbot status section*@
            <RadzenSplitterPane Size="30%" Min="10%" Max="50%">
                <RadzenCard Style="background-color: rgb(178, 222, 228)" class="rz-border-radius-0">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="1rem" Wrap="FlexWrap.Wrap">
                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="1rem" Wrap="FlexWrap.NoWrap">
                                <RadzenButton Style="width: 150px" class="rz-border-radius-0 rz-ripple" Variant="Variant.Flat" Shade="Shade.Darker" Click=@(StartDockerComposeAsync) BusyText="Starting ..." IsBusy=@busy Text="Start Farmerbot" ButtonStyle="ButtonStyle.Success" Disabled="@(!startButton)" />
                                <RadzenButton Style="width: 150px" class="rz-border-radius-0 rz-ripple" Variant="Variant.Flat" Shade="Shade.Darker" Click=@(StopDockerComposeAsync) BusyText="Stopping ..." IsBusy=@busy Text="Stop Farmerbot" ButtonStyle="ButtonStyle.Danger" Disabled="@(!stopButton)" />
                                <RadzenButton Style="width: 150px" class="rz-border-radius-0 rz-ripple" Variant="Variant.Flat" Shade="Shade.Darker" Click=@(UpdateDockerComposeAsync) BusyText="Updating ..." IsBusy=@busy Text="Update Status" ButtonStyle="ButtonStyle.Secondary" />
                            </RadzenStack>
                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="1rem" Wrap="FlexWrap.NoWrap">
                                <RadzenCard Style="width: 300px; height: 89px;" class="rz-border-radius-0">
                                <FarmerBotStatusPage />
                                </RadzenCard>
                            </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </RadzenSplitterPane>
            @*### bottom left - no idea by now section*@
            <RadzenSplitterPane style="display: flex; justify-content: center; align-items: center;">
                <RadzenCard class="rz-border-radius-0 align-content-center justify-content-center">
                    <RadzenText> //TODO no idea by now section </RadzenText>
                </RadzenCard>
                <SetupStatusPage />
            </RadzenSplitterPane>
        </RadzenSplitter>
    </RadzenSplitterPane>
    <RadzenSplitterPane>
        <RadzenSplitter Collapse=@OnCollapseDisabled Expand=@OnExpand Resize=@OnResizeDisabled>
            @*### full right - Node list and stati*@
            <RadzenSplitterPane style="display: flex; justify-content: center; align-items: center;">
                <RadzenCard class="rz-border-radius-0 align-content-center justify-content-center">
                    <RadzenText> //TODO node status section </RadzenText>
                </RadzenCard>
            </RadzenSplitterPane>
        </RadzenSplitter>
    </RadzenSplitterPane>
</RadzenSplitter>

@code {
    private ServiceResponse<FarmerBotStatus>? Response { get; set; } = new ServiceResponse<FarmerBotStatus>();
    private bool startButton = false;
    private bool stopButton = false;
    private bool busy = false;

    protected override void OnAfterRender(bool firstRender){
        if (DockerService.ActualFarmerBotStatus != null)
        {
            if (!DockerService.ActualFarmerBotStatus.Status())
            {
                startButton = true;
            }
            else
            {
                stopButton = true;
            }
        }
    }

    protected override void OnInitialized()
    {
        if (DockerService.ActualFarmerBotStatus != null)
        {
            if (!DockerService.ActualFarmerBotStatus.Status())
            {
                startButton = true;
            }
            else
            {
                stopButton = true;
            }
        }
    }

    private async Task UpdateDockerComposeAsync()
    {
        actionIds.Add(EventConsoleService.LogMessage("Trying to Update Farmerbot status...", LogLevel.Information, "Updating Status...", EventTyp.UserAction, EventResult.Valueless, ActionType.DockerStatus, true), DashboardActions.Status);
        busy = true;
        StateHasChanged();

        Response = await DockerService.GetComposeStatusAsync();
        if (Response.Success)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{Response.Message}", Detail = $"{EventConsoleService.Transform(Response.Success)}", Duration = 4000, Click = NotificationClick, CloseOnClick = true, Payload = DateTime.Now });
            UpdateLog(DashboardActions.Status, LogLevel.Information, "Updating Status", EventTyp.UserAction, EventResult.Successfully, ActionType.DockerStatus, false);
            busy = false;
            //if (DockerService.ActualFarmerBotStatus != null)
            //{
            //    if (!DockerService.ActualFarmerBotStatus.Status())
            //    {
            //        startButton = true;
            //    }
            //    else
            //    {
            //        stopButton = true;
            //    }
            //}
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{Response.Message}", Detail = $"{EventConsoleService.Transform(Response.Success)}", Duration = 4000, Click = NotificationClick, CloseOnClick = true, Payload = DateTime.Now });
            UpdateLog(DashboardActions.Status, LogLevel.Error, "Updating Status", EventTyp.UserAction, EventResult.Unsuccessfully, ActionType.DockerStatus, false);
            busy = false;
            //if (DockerService.ActualFarmerBotStatus != null)
            //{
            //    if (!DockerService.ActualFarmerBotStatus.Status())
            //    {
            //        startButton = true;
            //    }
            //    else
            //    {
            //        stopButton = true;
            //    }
            //}
        }
    }

    private async Task StartDockerComposeAsync()
    {
        actionIds.Add(EventConsoleService.LogMessage("Trying to start Farmerbot via docker compose...", LogLevel.Information, "Starting FarmerBot...", EventTyp.UserAction, EventResult.Valueless, ActionType.DockerStart, true), DashboardActions.Start);
        busy = true;
        StateHasChanged();

        Response = await DockerService.StartComposeAsync();
        if (Response.Success)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{Response.Message}", Detail = $"{EventConsoleService.Transform(Response.Success)}", Duration = 4000, Click = NotificationClick, CloseOnClick = true, Payload = DateTime.Now });
            UpdateLog(DashboardActions.Start, LogLevel.Information, "Starting FarmerBot", EventTyp.UserAction, EventResult.Successfully, ActionType.DockerStart, false);
            busy = false;
            stopButton = true;
            startButton = false;
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{Response.Message}", Detail = $"{EventConsoleService.Transform(Response.Success)}", Duration = 4000, Click = NotificationClick, CloseOnClick = true, Payload = DateTime.Now });
            UpdateLog(DashboardActions.Start, LogLevel.Error, "Starting FarmerBot", EventTyp.UserAction, EventResult.Unsuccessfully, ActionType.DockerStart, false);
            busy = false;
            stopButton = true;
            startButton = true;
        }
    }

    private async Task StopDockerComposeAsync()
    {
        actionIds.Add(EventConsoleService.LogMessage("Trying to start Farmerbot via docker compose...", LogLevel.Information, "Stopping FarmerBot...", EventTyp.UserAction, EventResult.Valueless, ActionType.DockerStop, true), DashboardActions.Stop);
        busy = true;
        StateHasChanged();

        Response = await DockerService.StopComposeAsync();
        if (Response.Success)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{Response.Message}", Detail = $"{EventConsoleService.Transform(Response.Success)}", Duration = 4000, Click = NotificationClick, CloseOnClick = true, Payload = DateTime.Now });
            UpdateLog(DashboardActions.Stop, LogLevel.Information, "Stopping FarmerBot", EventTyp.UserAction, EventResult.Successfully, ActionType.DockerStop, false);
            busy = false;
            stopButton = false;
            startButton = true;
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{Response.Message}", Detail = $"{EventConsoleService.Transform(Response.Success)}", Duration = 4000, Click = NotificationClick, CloseOnClick = true, Payload = DateTime.Now });
            UpdateLog(DashboardActions.Stop, LogLevel.Error, "Stopping FarmerBot", EventTyp.UserAction, EventResult.Unsuccessfully, ActionType.DockerStop, false);
            busy = false;
            stopButton = true;
            startButton = true;
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    void NotificationClick(NotificationMessage message)
    {
        //lets see ...
    }

    void OnCollapse(RadzenSplitterEventArgs args)
    {

    }

    void OnExpand(RadzenSplitterEventArgs args)
    {

    }

    void OnResize(RadzenSplitterResizeEventArgs args)
    {

    }

    void OnCollapseDisabled(RadzenSplitterEventArgs args)
    {
        args.Cancel = true;
    }

    void OnResizeDisabled(RadzenSplitterResizeEventArgs args)
    {
        args.Cancel = true;
    }
}