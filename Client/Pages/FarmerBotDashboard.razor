@page "/dashboard"
@using FarmerBotWebUI.Shared;
@using FarmerbotWebUI.Shared.BotConfig;
@inject IEventConsoleService EventConsoleService
@inject IAppSettings AppSettings
@inject IDockerService DockerService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject NotificationService NotificationService

<RadzenSplitter Orientation="Orientation.Horizontal" Collapse=@OnCollapse Expand=@OnExpand style="height: 100%;">
    <RadzenSplitterPane Size="40%" Min="10%" Max="70%">
        <RadzenSplitter Orientation="Orientation.Vertical" Collapse=@OnCollapse Expand=@OnExpand>
            @*### top left - On/off and farmerbot status section*@
            <RadzenSplitterPane Size="30%" Min="25%" Max="60%" Style="background-color: rgb(137, 174, 192); display: flex; justify-content: left; align-items:start">
                <RadzenStack Style="margin-left: 20px; margin-top: 20px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="1rem" Wrap="FlexWrap.Wrap">
                    @foreach (var botStatus in DockerService.ActualFarmerBotStatus)
                    {
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="1rem" Wrap="FlexWrap.Wrap">
                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="1rem" Wrap="FlexWrap.NoWrap">
                                <RadzenButton Style="width: 200px" class="rz-border-radius-0 rz-ripple" Variant="Variant.Flat" Shade="Shade.Darker" Click=@(() => StartDockerComposeAsync(botStatus.Name)) BusyText="Doing ..." IsBusy=@busy Text="@($"Start \"{botStatus.Name}\"")" ButtonStyle="ButtonStyle.Success" Disabled="@(botStatus.Status())" />
                                <RadzenButton Style="width: 200px" class="rz-border-radius-0 rz-ripple" Variant="Variant.Flat" Shade="Shade.Darker" Click=@(() => StopDockerComposeAsync(botStatus.Name)) BusyText="Doing ..." IsBusy=@busy Text="@($"Stop \"{botStatus.Name}\"")" ButtonStyle="ButtonStyle.Danger" Disabled="@(!botStatus.Status())" />
                                <RadzenButton Style="width: 200px" class="rz-border-radius-0 rz-ripple" Variant="Variant.Flat" Shade="Shade.Darker" Click=@(() => UpdateDockerComposeAsync(botStatus.Name)) BusyText="Doing ..." IsBusy=@busy Text="@($"Update Status of \"{botStatus.Name}\"")" ButtonStyle="ButtonStyle.Secondary" />
                            </RadzenStack>
                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="1rem" Wrap="FlexWrap.NoWrap">
                                <FarmerBotStatusPage botStatus=@botStatus />
                            </RadzenStack>
                        </RadzenStack>
                    }
                    </RadzenStack>
            </RadzenSplitterPane>
            @*### bottom left - no idea by now section*@
            <RadzenSplitterPane style="background-color: rgb(137, 174, 192); display: flex; justify-content: left; align-items:start; ">
                <RadzenStack Style="margin-left: 20px; margin-top: 20px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="1rem" Wrap="FlexWrap.Wrap">
                    @foreach (var botStatus in DockerService.ActualFarmerBotStatus)
                    {
                        <SetupStatusPage botStatus=@botStatus />
                    }
                </RadzenStack>
            </RadzenSplitterPane>
        </RadzenSplitter>
    </RadzenSplitterPane>
    <RadzenSplitterPane>
        <RadzenSplitter Collapse=@OnCollapseDisabled Expand=@OnExpand Resize=@OnResizeDisabled>
            @*### full right - Node list and stati*@
            <RadzenSplitterPane style="display: flex; justify-content: center; align-items: center;">
                <RadzenStack Style="margin-left: 20px; margin-top: 20px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="1rem" Wrap="FlexWrap.Wrap">
@*                    @foreach (var botStatus in DockerService.ActualFarmerBotStatus)
                    {
                        //<NodesStatus nodeStatus=@ />
                    }*@
                </RadzenStack>
            </RadzenSplitterPane>
        </RadzenSplitter>
    </RadzenSplitterPane>
</RadzenSplitter>

@code {
    private ServiceResponse<List<FarmerBotStatus>>? Response { get; set; } = new ServiceResponse<List<FarmerBotStatus>>(){ Data = new List<FarmerBotStatus>(), Message = "", Success = false };
    private bool startButton = false;
    //private bool stopButton = false;
    private bool busy = false;

    protected override void OnAfterRender(bool firstRender){
        //if (DockerService.ActualFarmerBotStatus != null)
        //{
        //    if (!DockerService.ActualFarmerBotStatus.Status())
        //    {
        //        startButton = true;
        //    }
        //    else
        //    {
        //        startButton = false;
        //    }
        //}
    }

    protected override void OnInitialized()
    {
        //if (DockerService.ActualFarmerBotStatus != null)
        //{
        //    if (!DockerService.ActualFarmerBotStatus.Status())
        //    {
        //        startButton = true;
        //    }
        //    else
        //    {
        //        startButton = false;
        //    }
        //    StateHasChanged();
        //}
        DockerService.StatusChanged += StateHasChanged;
    }

    private async Task UpdateDockerComposeAsync(string botName)
    {
        EventSourceActionId eventSourceActionId = new EventSourceActionId { Action = EventAction.FarmerBotStatus, Source = EventSource.Dashboard, Typ = EventTyp.UserAction };
        busy = true;
        StateHasChanged();

        Response.Data.Remove(Response.Data.FirstOrDefault(r => r.Name == botName));
        var data = await DockerService.GetComposeStatusAsync(botName, eventSourceActionId);
        Response.Data.Add(data.Data);
        busy = false;
        StateHasChanged();
    }

    private async Task StartDockerComposeAsync(string botName)
    {
        EventSourceActionId eventSourceActionId = new EventSourceActionId { Action = EventAction.FarmerBotStart, Source = EventSource.Dashboard, Typ = EventTyp.UserAction };
        busy = true;
        StateHasChanged();

        Response.Data.Remove(Response.Data.FirstOrDefault(r => r.Name == botName));
        var data = await DockerService.StartComposeAsync(botName, eventSourceActionId);
        Response.Data.Add(data.Data);
        busy = false;
        StateHasChanged();
    }

    private async Task StopDockerComposeAsync(string botName)
    {
        EventSourceActionId eventSourceActionId = new EventSourceActionId { Action = EventAction.FarmerBotStop, Source = EventSource.Dashboard, Typ = EventTyp.UserAction };
        busy = true;
        StateHasChanged();

        Response.Data.Remove(Response.Data.FirstOrDefault(r => r.Name == botName));
        var data = await DockerService.StopComposeAsync(botName, eventSourceActionId);
        Response.Data.Add(data.Data);
        busy = false;
        StateHasChanged();
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    void NotificationClick(NotificationMessage message)
    {
        //lets see ...
    }

    void OnCollapse(RadzenSplitterEventArgs args)
    {

    }

    void OnExpand(RadzenSplitterEventArgs args)
    {

    }

    void OnResize(RadzenSplitterResizeEventArgs args)
    {

    }

    void OnCollapseDisabled(RadzenSplitterEventArgs args)
    {
        args.Cancel = true;
    }

    void OnResizeDisabled(RadzenSplitterResizeEventArgs args)
    {
        args.Cancel = true;
    }

    public void Dispose()
    {
        DockerService.StatusChanged -= StateHasChanged;
    }
}