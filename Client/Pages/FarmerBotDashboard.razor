@page "/dashboard"

@inject IEventConsoleService EventConsoleService
@inject IDockerService DockerService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject NotificationService NotificationService

<RadzenSplitter Orientation="Orientation.Horizontal" Collapse=@OnCollapse Expand=@OnExpand style="height: 100%;">
    <RadzenSplitterPane Size="40%" Min="10%" Max="70%">
        <RadzenSplitter Orientation="Orientation.Vertical" Collapse=@OnCollapse Expand=@OnExpand>
            @*### top left - On/off and farmerbot status section*@
            <RadzenSplitterPane Size="30%" Min="25%" Max="60%" Style="padding: 20px; background-color: rgb(137, 174, 192); display: flex; justify-content: left; align-items: left;">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="1rem" Wrap="FlexWrap.Wrap">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="1rem" Wrap="FlexWrap.NoWrap">
                            <RadzenButton Style="width: 150px" class="rz-border-radius-0 rz-ripple" Variant="Variant.Flat" Shade="Shade.Darker" Click=@(StartDockerComposeAsync) BusyText="Doing ..." IsBusy=@busy Text="Start Farmerbot" ButtonStyle="ButtonStyle.Success" Disabled="@(!startButton)" />
                        <RadzenButton Style="width: 150px" class="rz-border-radius-0 rz-ripple" Variant="Variant.Flat" Shade="Shade.Darker" Click=@(StopDockerComposeAsync) BusyText="Doing ..." IsBusy=@busy Text="Stop Farmerbot" ButtonStyle="ButtonStyle.Danger" Disabled="@(startButton)" />
                        <RadzenButton Style="width: 150px" class="rz-border-radius-0 rz-ripple" Variant="Variant.Flat" Shade="Shade.Darker" Click=@(UpdateDockerComposeAsync) BusyText="Doing ..." IsBusy=@busy Text="Update Status" ButtonStyle="ButtonStyle.Secondary" />
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="1rem" Wrap="FlexWrap.NoWrap">
                            <FarmerBotStatusPage />
                        </RadzenStack>
                </RadzenStack>
            </RadzenSplitterPane>
            @*### bottom left - no idea by now section*@
            <RadzenSplitterPane style="padding: 20px; background-color: rgb(137, 174, 192); display: flex; justify-content: left; align-items: left; ">
                <SetupStatusPage />
            </RadzenSplitterPane>
        </RadzenSplitter>
    </RadzenSplitterPane>
    <RadzenSplitterPane>
        <RadzenSplitter Collapse=@OnCollapseDisabled Expand=@OnExpand Resize=@OnResizeDisabled>
            @*### full right - Node list and stati*@
            <RadzenSplitterPane style="display: flex; justify-content: center; align-items: center;">
                <RadzenCard class="rz-border-radius-0 align-content-center justify-content-center">
                    <RadzenText> //TODO node status section </RadzenText>
                </RadzenCard>
            </RadzenSplitterPane>
        </RadzenSplitter>
    </RadzenSplitterPane>
</RadzenSplitter>

@code {
    private ServiceResponse<FarmerBotStatus>? Response { get; set; } = new ServiceResponse<FarmerBotStatus>();
    private bool startButton = false;
    //private bool stopButton = false;
    private bool busy = false;

    protected override void OnAfterRender(bool firstRender){
        if (DockerService.ActualFarmerBotStatus != null)
        {
            if (!DockerService.ActualFarmerBotStatus.Status())
            {
                startButton = true;
            }
            else
            {
                startButton = false;
            }
        }
    }

    protected override void OnInitialized()
    {
        if (DockerService.ActualFarmerBotStatus != null)
        {
            if (!DockerService.ActualFarmerBotStatus.Status())
            {
                startButton = true;
            }
            else
            {
                startButton = false;
            }
            StateHasChanged();
        }
        DockerService.StatusChanged += StateHasChanged;
    }

    private async Task UpdateDockerComposeAsync()
    {
        EventSourceActionId eventSourceActionId = new EventSourceActionId { Action = EventAction.FarmerBotStatus, Source = EventSource.Dashboard, Typ = EventTyp.UserAction };
        busy = true;
        StateHasChanged();

        Response = await DockerService.GetComposeStatusAsync(eventSourceActionId);
        busy = false;
        StateHasChanged();
    }

    private async Task StartDockerComposeAsync()
    {
        EventSourceActionId eventSourceActionId = new EventSourceActionId { Action = EventAction.FarmerBotStart, Source = EventSource.Dashboard, Typ = EventTyp.UserAction };
        busy = true;
        StateHasChanged();

        Response = await DockerService.StartComposeAsync(eventSourceActionId);
        busy = false;
        StateHasChanged();
    }

    private async Task StopDockerComposeAsync()
    {
        EventSourceActionId eventSourceActionId = new EventSourceActionId { Action = EventAction.FarmerBotStop, Source = EventSource.Dashboard, Typ = EventTyp.UserAction };
        busy = true;
        StateHasChanged();

        Response = await DockerService.StopComposeAsync(eventSourceActionId);
        busy = false;
        StateHasChanged();
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    void NotificationClick(NotificationMessage message)
    {
        //lets see ...
    }

    void OnCollapse(RadzenSplitterEventArgs args)
    {

    }

    void OnExpand(RadzenSplitterEventArgs args)
    {

    }

    void OnResize(RadzenSplitterResizeEventArgs args)
    {

    }

    void OnCollapseDisabled(RadzenSplitterEventArgs args)
    {
        args.Cancel = true;
    }

    void OnResizeDisabled(RadzenSplitterResizeEventArgs args)
    {
        args.Cancel = true;
    }

    public void Dispose()
    {
        DockerService.StatusChanged -= StateHasChanged;
    }
}