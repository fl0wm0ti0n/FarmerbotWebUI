@using FarmerBotWebUI.Shared;
@inject ISettingsService SettingsService
@inject IDockerService DockerService
@inject IAppSettings AppSettings

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <div class="row">
                <div class="col-12" style="margin-top: 5rem; margin-bottom: 5rem">
                    <RadzenText Text="Page not found" TextStyle="TextStyle.DisplayH1" style="margin: 0; margin-bottom: 2rem" TextAlign="TextAlign.Center" />
                    <RadzenText Text="Sorry, but there's nothing here!" TextStyle="TextStyle.H6" style="margin: 0" TextAlign="TextAlign.Center" TagName="TagName.P" />
                </div>
            </div>
        </LayoutView>
    </NotFound>
</Router>

@code {

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AppSettings.OnAppSettingsChanged += UpdateAppSettings;

        // initialize routines

        // init settings
        int maxRetries = 5;
        int currentRetry = 0;
        bool settingsLoaded = false;
        while (currentRetry < maxRetries && !settingsLoaded)
        {
            EventSourceActionId eventSourceActionId = new EventSourceActionId { Action = EventAction.GetSettings, Source = EventSource.Startup, Typ = EventTyp.ClientJob };
            var response = await SettingsService.GetConfigurationObject(eventSourceActionId);
            if (response.Success)
            {
                AppSettings = response.Data;
                settingsLoaded = true;
                _ = await SettingsService.StartStatusInterval();
                await InitializeDocker();
            }
            else
            {
                await Task.Delay(TimeSpan.FromSeconds(2));
            }
        }

        if (!settingsLoaded)
        {
            // Handle the case when settings couldn't be loaded after retries
        }
    }

    private async Task InitializeDocker()
    {
        if (AppSettings.DockerSettings.DockerEndpointWindows != "" || AppSettings.DockerSettings.DockerEndpointWindows != "")
        {
            await DockerService.StartStatusInterval();
        }
    }

    private void UpdateAppSettings(object sender, AppSettings newAppSettings)
    {
        AppSettings = newAppSettings;
        _ = InitializeDocker();
    }

    private async Task InitializeCompose()
    {
        //if (AppSettings.DockerSettings. != "" || AppSettings.DockerSettings.DockerEndpointWindows != "")
        //{
        //    await DockerService.StartStatusInterval();
        //}
    }

    public void Dispose()
    {
        AppSettings.OnAppSettingsChanged -= UpdateAppSettings;
    }
}
