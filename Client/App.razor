@inject ISettingsService SettingsService
@inject IDockerService DockerService

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <div class="row">
                <div class="col-12" style="margin-top: 5rem; margin-bottom: 5rem">
                    <RadzenText Text="Page not found" TextStyle="TextStyle.DisplayH1" style="margin: 0; margin-bottom: 2rem" TextAlign="TextAlign.Center" />
                    <RadzenText Text="Sorry, but there's nothing here!" TextStyle="TextStyle.H6" style="margin: 0" TextAlign="TextAlign.Center" TagName="TagName.P" />
                </div>
            </div>
        </LayoutView>
    </NotFound>
</Router>

@code {

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // initialize routines

        // init settings
        //await SettingsService.GetConfigurationObject(new EventSourceActionId { Action = EventAction.GetSettings, Source = EventSource.Startup, Typ = EventTyp.ClientJob });
        await SettingsService.StartStatusInterval();

        // init docker
        if (SettingsService.AppSetting.DockerSettings.DockerEndpointWindows != "" || SettingsService.AppSetting.DockerSettings.DockerEndpointWindows != "")
        {
            await DockerService.StartStatusInterval();
            //if (DockerService.ActualFarmerBotStatus == null || DockerService.ActualFarmerBotStatus.NoStatus)
            //{
            //    EventSourceActionId eventSourceActionId = new EventSourceActionId { Action = EventAction.FarmerBotStatus, Source = EventSource.Startup, Typ = EventTyp.ClientJob };
            //    Response = await DockerService.GetComposeStatusAsync(eventSourceActionId);
            //    // TODO: Error handling
            //}
            //else
            //{
            //    // TODO: Error handling if container false
            //}
        }
    }
}
