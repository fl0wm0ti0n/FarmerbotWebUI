@using FarmerBotWebUI.Shared;
@inject ISettingsService SettingsService
@inject IDockerService DockerService
@inject INodeStatusService NodeStatusService
@inject IAppSettings AppSettings
@inject IFileService FileService

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <div class="row">
                <div class="col-12" style="margin-top: 5rem; margin-bottom: 5rem">
                    <RadzenText Text="Page not found" TextStyle="TextStyle.DisplayH1" style="margin: 0; margin-bottom: 2rem" TextAlign="TextAlign.Center" />
                    <RadzenText Text="Sorry, but there's nothing here!" TextStyle="TextStyle.H6" style="margin: 0" TextAlign="TextAlign.Center" TagName="TagName.P" />
                </div>
            </div>
        </LayoutView>
    </NotFound>
</Router>

@code {

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AppSettings.OnAppSettingsChanged += StartServices;

        // initialize routines

        // init settings
        int maxRetries = 5;
        int currentRetry = 0;
        bool settingsLoaded = false;
        while (currentRetry < maxRetries && !settingsLoaded)
        {
            EventSourceActionId eventSourceActionId = new EventSourceActionId { Action = EventAction.GetSettings, Source = EventSource.ClientStartup, Typ = EventTyp.ClientJob };
            var response = await SettingsService.GetConfigurationObject(eventSourceActionId);
            if (response.Success)
            {
                settingsLoaded = true;
                SettingsService.StartStatusInterval();
                //InitializeDocker();
            }
            else
            {
                await Task.Delay(TimeSpan.FromSeconds(2));
            }
        }

        if (!settingsLoaded)
        {
            // Handle the case when settings couldn't be loaded after retries
        }
    }

    private void InitializeDockerService()
    {
        if (!string.IsNullOrEmpty(AppSettings.DockerSettings.DockerEndpointWindows) || !string.IsNullOrEmpty(AppSettings.DockerSettings.DockerEndpointLinux) )
        {
            EventSourceActionId eventSourceActionId = new EventSourceActionId { Action = EventAction.FarmerBotStatus, Source = EventSource.ClientStartup, Typ = EventTyp.ClientJob };
            DockerService.GetComposeStatusListAsync(eventSourceActionId);
            DockerService.StartStatusInterval();
        }
    }

    private void InitializeNodeStatusService()
    {
        if (AppSettings.ThreefoldApiSettings.Count > 0 || AppSettings.FarmerBotSettings.Bots.Count > 0)
        {
            EventSourceActionId eventSourceActionId = new EventSourceActionId { Action = EventAction.GetNodeStatus, Source = EventSource.ClientStartup, Typ = EventTyp.ClientJob };
            NodeStatusService.GetNodeStatusListAsync(eventSourceActionId);
            NodeStatusService.StartStatusInterval();
        }
    }

    private void InitializeFilesService()
    {
        if (AppSettings.FarmerBotSettings.Bots.Count > 0)
        {
            EventSourceActionId eventSourceActionId = new EventSourceActionId { Action = EventAction.GetFarmerBot, Source = EventSource.ClientStartup, Typ = EventTyp.ClientJob };
            FileService.GetFarmerBotListAsync(eventSourceActionId);
            FileService.StartStatusInterval();
        }
    }

    private void StartServices(object sender, AppSettings newAppSettings)
    {
        //AppSettings.SaveSettings(newAppSettings);
        InitializeDockerService();
        InitializeNodeStatusService();
        AppSettings.OnAppSettingsChanged -= StartServices;
    }

    public void Dispose()
    {
        AppSettings.OnAppSettingsChanged -= StartServices;
    }
}
